Problem:
A peak element in a 2D grid is an element that is strictly greater than all of its adjacent neighbors to the left, right, top, and bottom.

Given a 0-indexed m x n matrix mat where no two adjacent cells are equal, find any peak element mat[i][j] and return the length 2 array [i,j].

You may assume that the entire matrix is surrounded by an outer perimeter with the value -1 in each cell.

You must write an algorithm that runs in O(m log(n)) or O(n log(m)) time.

Approach:
 int f(vector<vector<int>>& a,int mid,int m,int n){
        int index=-1;int maxx=-1;
        for(int i=0;i<m;i++){
            if(a[i][mid]>maxx){
                maxx=a[i][mid];
                index=i;
            }
        }
        return index;
    }
    vector<int> findPeakGrid(vector<vector<int>>& a) {
        int m=a.size();int n=a[0].size();
        int l=0;int h=n-1;
        while(l<=h){
            int mid=(l+h)/2;
            int c=f(a,mid,m,n);int left;int right;
           if(mid>=1){
                left=a[c][mid-1];
            }
            else{
                left=-1;
            }
            if(mid+1<n){
                right=a[c][mid+1];
            }
            else{
                right=-1;
            }
            if(a[c][mid]>left&&a[c][mid]>right){
                return {c,mid};
            }
            else if(a[c][mid]<left){
                h=mid-1;
            }else l=mid+1;
        }
        return {-1,-1};

    }
