A conveyor belt has packages that must be shipped from one port to another within days days.

The ith package on the conveyor belt has a weight of weights[i]. Each day, we load the ship with packages on the conveyor belt (in the order given by weights). We may not load more weight than the maximum weight capacity of the ship.

Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within days days.

To solve this problem, we can use a binary search approach to find the minimum weight capacity of the ship that allows us to ship all packages within days days.

Approach:
Binary Search Setup:

Left Bound (left): Initialize it to the maximum weight of any single package (max_element(weights)), because at minimum, the ship must be able to carry the heaviest package alone.
Right Bound (right): Initialize it to the sum of all package weights (sum(weights)), because at maximum, the ship could carry all packages in one day.
Binary Search Execution:

While left is less than or equal to right:
Calculate the middle value mid (mid = (left + right) / 2).
Check if it's possible to ship all packages within days days using mid as the weight capacity.
If true, then mid might be a valid capacity, so try to find a smaller capacity (right = mid - 1).
Otherwise, increase the capacity (left = mid + 1).
Feasibility Check Function canShipWithinDays:

Iterate through the weights array and simulate loading packages onto the ship.
Track the cumulative weight loaded on the current day.
If adding a package exceeds mid (current capacity), increment the day count and reset the cumulative weight.
After iterating through all packages, check if the number of days taken is less than or equal to days.
Termination:

The binary search terminates when left exceeds right. At this point, left will be the minimum weight capacity that allows shipping all packages within days days.

Code:

int fu(vector<int>a,int m,int days){
    int s=0;int c=1;
    for(int i=0;i<a.size();i++){
        s+=a[i];
        if(s>m){
            c++;
            s=a[i];
        }
    }
    if(c<=days)return 1;
    else return 0;
}
    int shipWithinDays(vector<int>& weights, int days) {
       int l=*max_element(weights.begin(),weights.end());
       int h=accumulate(weights.begin(),weights.end(),0);
       while(l<=h){
        int m=(l+h)/2;
        int c=fu(weights,m,days);
        if(c==1){
            h=m-1;
        }
        else{
            l=m+1;
        }
       }
       return l;
    }
};
