Finding the median of two sorted arrays in O(log(min(m,n))) time complexity can be achieved using a binary search approach combined with partitioning. Hereâ€™s how you can approach this problem:

Problem Understanding:
Given two sorted arrays nums1 and nums2 of sizes m and n respectively, find the median of the combined sorted array formed by merging nums1 and nums2.

Approach:
Binary Search on Smaller Array:

Perform a binary search on the smaller array (nums1 if m <= n, otherwise nums2).
Use binary search to partition the smaller array into two parts such that the elements to the left are smaller than elements on the right.
Partitioning Logic:

Choose a partition in the smaller array (nums1) such that:
Elements to the left (left_part_nums1) are less than or equal to elements on the right (right_part_nums1).
Similarly, find the corresponding partition in the larger array (nums2).
Binary Search Adjustment:

Adjust the partition based on whether the median condition (left_part <= right_part) is met.
If not, adjust the binary search based on whether the median is to the left or right of the current partitions.
Handling Even and Odd Total Lengths:

Calculate the median based on whether the combined length of nums1 and nums2 is even or odd.


double findMedianSortedArrays(vector<int>& a, vector<int>& b) {
        int n1=a.size();int n2=b.size();
        if(n1>n2) return findMedianSortedArrays(b,a);
        int l=0;int h=n1;int left=(n1+n2+1)/2;
        while(l<=h){
            int mid1=(l+h)/2;
            int mid2=left-mid1;
            int l1=INT_MIN;int l2=INT_MIN;int r1=INT_MAX;int r2=INT_MAX;int n=n1+n2;
            if(mid1<n1) {
                r1=a[mid1];
            }
            if(mid2<n2){
                r2=b[mid2];
            }
            if(mid1>=1){
                l1=a[mid1-1];
            }
            if(mid2>=1){
                l2=b[mid2-1];
            }
            if(l1<=r2&&l2<=r1){
                if(n%2==1)return max(l1,l2);
                return double(max(l1,l2)+min(r1,r2))/2.0;
            }
            else if(l1>r2){
                h=mid1-1;
            }
            else {
                l=mid1+1;
            }
        }
        return -1;
    }
