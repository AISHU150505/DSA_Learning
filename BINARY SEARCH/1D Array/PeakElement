Finding a peak element in an array is a common problem where a peak element is defined as an element that is greater than its neighbors. There can be multiple peak elements, and the goal is to find any one of them efficiently.
Approach:
Binary Search Approach:

Utilize a binary search technique to efficiently find a peak element.
Compare the middle element (nums[mid]) with its neighbors (nums[mid-1] and nums[mid+1]).
Decision Making:

If nums[mid] is greater than both nums[mid-1] and nums[mid+1], then nums[mid] is a peak element.
Adjust the search space based on whether the middle element is increasing or decreasing compared to its neighbors.
Search Space Adjustment:

If nums[mid] < nums[mid+1], move the search range to the right half (left = mid + 1).
Otherwise, move the search range to the left half (right = mid - 1).
Edge Cases:

Consider the boundaries of the array where the peak element could be at the start or end.

int findPeakElement(vector<int>& a) {
        int n=a.size();int l=1;int h=n-2;
        if(n==1)return 0;
        if(a[0]>a[1])return 0;
        if(a[n-1]>a[n-2])return n-1;
        while(l<=h){
            int m=(l+h)/2;
            if(a[m]>a[m-1]&&a[m]>a[m+1])return m;
            if(a[m]>a[m-1]){
                l=m+1;
            }
            else{
                h=m-1;
            }
        }
        return -1;
    }
