Merge sort is a divide-and-conquer algorithm that divides the input array into two halves, recursively sorts each half, and then merges the sorted halves to produce a sorted array. Hereâ€™s how merge sort typically works:

My Approach :
Divide: Divide the unsorted array into two halves.
Conquer: Recursively sort each half.
Combine: Merge the two sorted halves to produce the sorted array.

Code:
void merge(int a[], int low, int mid, int high)
    {
         int left=low;
         int right=mid+1;
         vector<int>temp;
         while(left<=mid&&right<=high){
             if(a[left]<=a[right]){
                 temp.push_back(a[left]);
                 left++;
             }
             else{
                 temp.push_back(a[right]);
                 right++;
             }
         }
         while(left<=mid){
             temp.push_back(a[left]);
             left++;
         }
         while(right<=high){
             temp.push_back(a[right]);
             right++;
         }
         for(int i=low;i<=high;i++){
             a[i]=temp[i-low];
             
         }
    }
    public:
    void mergeSort(int arr[], int l, int r)
    {
        if(l==r)return ;
        int mid=(l+r)/2;
        mergeSort(arr,l,mid);
        mergeSort(arr,mid+1,r);
        merge(arr,l,mid,r);
    }
Time Complexity : O(nlogn)

